#!/usr/bin/env python3

import signal
import json
import xmltodict
import urllib.request

import gi
gi.require_version('Gtk', '3.0')
gi.require_version('AppIndicator3', '0.1')
gi.require_version('Notify', '0.7')
from gi.repository import Gtk, AppIndicator3, Notify


APPINDICATOR_ID = 'fpndindicator'


def fetch_geoip():
    request = urllib.request.Request('https://geoip.ubuntu.com/lookup')
    response = urllib.request.urlopen(request)
    payload = xmltodict.parse(response.read())
    return json.dumps(payload, indent=4, separators=(',', ': '))


def fetch_joke():
    request = urllib.request.Request('http://api.icndb.com/jokes/random?limitTo=[nerdy]')
    response = urllib.request.urlopen(request)
    joke = json.loads(response.read())['value']['joke']
    return joke


def run_service_cmd(action='status'):
    """
    Run systemctl command on fpnd service.

    :param action: one of <start|stop|status>
    :return true|false: command success
    """
    import os
    import subprocess

    result = ''
    actions = ['start', 'stop', 'status']
    svc_list = ['systemctl, --no-pager']
    act_list = [action, 'fpnd.service']

    if os.path.isfile('/sbin/openrc'):
        svc_list = ['pkexec', '/sbin/openrc', '-s']
        act_list = ['fpnd', action]
    cmd = svc_list + act_list

    if action in actions:
        print('Running {}'.format(cmd))
        pass
    else:
        msg = 'Invalid action: {}'.format(action)
        print(msg)
        return result

    try:
        b = subprocess.Popen(cmd,
                             stderr=subprocess.PIPE,
                             stdout=subprocess.PIPE,
                             shell=False)

        out, err = b.communicate()

        if err:
            print('run_service_cmd err result: {}'.format(err.decode().strip()))
            result = err.decode().strip()
        elif out:
            result = out.decode().strip()
            print('{} result: {}'.format(action, out.decode().strip()))

    except Exception as exc:
        print('run_service_cmd exception: {}'.format(exc))
        pass

    return result


class Indicator():
    def __init__(self):
        self.app_id = APPINDICATOR_ID
        icon_name = 'network-offline-symbolic'
        self.trayindicator = AppIndicator3.Indicator.new(
            self.app_id,
            icon_name,
            AppIndicator3.IndicatorCategory.APPLICATION_STATUS)

        self.trayindicator.set_status(AppIndicator3.IndicatorStatus.ACTIVE)
        self.trayindicator.set_attention_icon_full('indicator-messages-new',
                                                   'State update')
        self.trayindicator.set_menu(self.create_menu())

    def create_menu(self):
        menu = Gtk.Menu()
        item_start = Gtk.MenuItem(label='Start daemon')
        item_start.connect('activate', self.startd)
        menu.append(item_start)

        item_stop = Gtk.MenuItem(label='Stop daemon')
        item_stop.connect('activate', self.stopd)
        menu.append(item_stop)

        item_status = Gtk.MenuItem(label='Get daemon status')
        item_status.connect('activate', self.statusd)
        menu.append(item_status)

        item_geoip = Gtk.MenuItem(label='Get geoip')
        item_geoip.connect('activate', self.geoip)
        menu.append(item_geoip)

        item_joke = Gtk.MenuItem(label='Joke')
        item_joke.connect('activate', self.joke)
        menu.append(item_joke)

        item_quit = Gtk.MenuItem(label='Quit')
        item_quit.connect('activate', self.stop)
        menu.append(item_quit)

        menu.show_all()
        return menu

    def stop(self, source):
        Notify.uninit()
        Gtk.main_quit()

    def joke(self, source):
        Notify.Notification.new("Joke", fetch_joke(), None).show()

    def geoip(self, source):
        Notify.Notification.new("Geoip", fetch_geoip(), None).show()

    def startd(self, source):
        svc_msg = run_service_cmd(action='start')
        self.trayindicator.set_icon_full('network-transmit-receive-symbolic',
                                         'Daemon active')
        Notify.Notification.new("Daemon status", svc_msg, None).show()

    def statusd(self, source):
        svc_msg = run_service_cmd(action='status')
        Notify.Notification.new("Daemon status", svc_msg, None).show()

    def stopd(self, source):
        svc_msg = run_service_cmd(action='stop')
        self.trayindicator.set_icon_full('network-offline-symbolic',
                                         'Daemon inactive')
        Notify.Notification.new("Daemon status", svc_msg, None).show()


def main():
    Indicator()
    Notify.init(APPINDICATOR_ID)
    Gtk.main()


if __name__ == "__main__":
    signal.signal(signal.SIGINT, signal.SIG_DFL)
    main()
